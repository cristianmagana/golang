apiVersion: apps/v1
kind: Deployment
metadata:
  name: load-test-app
  labels:
    app: load-test-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: load-test-app
  template:
    metadata:
      labels:
        app: load-test-app
    spec:
      containers:
      - name: load-test-app
        image: load-test-app:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 6060
          name: debug
          protocol: TCP
        env:
        - name: GO_ENV
          value: "development"
        - name: GOMAXPROCS
          value: "2"
        - name: ENABLE_MEMORY_LEAK
          value: "true"
        - name: ENABLE_GOROUTINE_LEAK  
          value: "true"
        - name: ENABLE_DEADLOCK
          value: "true"
        - name: ENABLE_MUTEX_LEAK
          value: "true"
        resources:
          requests:
            memory: "64Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
      restartPolicy: Always

---
apiVersion: v1
kind: Service
metadata:
  name: load-test-app-service
  labels:
    app: load-test-app
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: load-test-app

---
apiVersion: v1
kind: Service
metadata:
  name: load-test-app-debug
  labels:
    app: load-test-app
    service-type: debug
spec:
  type: ClusterIP
  ports:
  - port: 6060
    targetPort: 6060
    protocol: TCP
    name: debug
  selector:
    app: load-test-app

---
# Optional: Ingress for external access (requires ingress controller)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: load-test-app-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: load-test.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: load-test-app-service
            port:
              number: 8080